{"version":3,"sources":["Components/Disclaimer.tsx","Fields.tsx","utils.ts","LayOutFloor.tsx","NonValidPlankControl.tsx","App.tsx","index.js"],"names":["Disclaimer","rel","href","InputField","name","value","handleChange","label","htmlFor","type","onChange","target","parseInt","getFloorData","plankWidth","fullWidthFloor","minWidth","wholePlanks","fullwidthOfFloor","Math","floor","getAllWholePlanks","leftOver","leftOverPlank","lastPlankIsValid","slicedRow","parseFloat","toFixed","getWidthOfSlicedRow","choppedPlanks","getChoppedPlanks","LayOutFloor","validPlank","i","push","unshift","pop","style","border","display","flexDirection","justifyContent","padding","margin","backgroundColor","color","textAlign","WALL_SPACE","map","item","borderTop","height","NonValidPlankControl","App","useState","setFullWidth","setPlankWidth","setminWidth","className","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8326a28b.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Disclaimer = () => (\n  <footer>\n    <h3>Disclaimer</h3>\n    <p>\n      Gjør dette på eget ansvar og følg bruksanvisningen som følger med ditt\n      gulv.\n    </p>\n    <p>\n      Hvis du har tilbakemeldinger eller ønsker om mer funksjonallitet, kan du\n      sende meg en{' '}\n      <a\n        rel=\"noopener\"\n        href=\"mailto:haakonwinther@gmail.com?subject=Parkettlegger.no\"\n      >\n        epost\n      </a>\n      .\n    </p>\n  </footer>\n);\n","import React from \"react\";\n\ntype Props = {\n  name: string;\n  label: string;\n  value: number;\n  handleChange: (number: number) => void;\n};\n\nexport const InputField = ({ name, value, handleChange, label }: Props) => (\n  <label htmlFor={name}>\n    {label}\n    <input\n      type=\"number\"\n      name={name}\n      value={value}\n      onChange={({ target }) => handleChange(parseInt(target.value, 10))}\n    />\n  </label>\n);\n","type LeftoverPlanks = {\n  plankWidth: number;\n  fullWidthFloor: number;\n  minWidth: number;\n};\n\nexport const WALL_SPACE = 10;\n\nconst getAllWholePlanks = (fullwidthOfFloor: number, plankWidth: number) =>\n  Math.floor(fullwidthOfFloor / plankWidth);\n\nconst getWidthOfSlicedRow = (leftOverPlank: number, plankWidth: number) =>\n  parseFloat(((leftOverPlank + 1) * (plankWidth / 2)).toFixed(1));\n\nconst getChoppedPlanks = (\n  wholePlanks: number,\n  plankWidth: number,\n  slicedRow: number\n) => wholePlanks - 1 * plankWidth + 2 * slicedRow;\n\nexport const getFloorData = ({\n  plankWidth,\n  fullWidthFloor,\n  minWidth\n}: LeftoverPlanks) => {\n  const wholePlanks = getAllWholePlanks(fullWidthFloor, plankWidth);\n  const leftOver = (fullWidthFloor / plankWidth - wholePlanks) * 100;\n  const leftOverPlank = leftOver / 100;\n  const lastPlankIsValid = leftOverPlank * plankWidth > minWidth;\n  const slicedRow = getWidthOfSlicedRow(leftOverPlank, plankWidth);\n  const choppedPlanks = getChoppedPlanks(wholePlanks, plankWidth, slicedRow);\n\n  return {\n    leftOver,\n    wholePlanks,\n    leftOverPlank,\n    lastPlankIsValid,\n    slicedRow,\n    choppedPlanks\n  };\n};\n","import React from 'react';\nimport { WALL_SPACE } from './utils';\n\ntype Props = {\n  wholePlanks: number;\n  validPlank: boolean;\n  leftOverPlank: number;\n  plankWidth: number;\n  slicedRow: number;\n};\n\nconst LayOutFloor = ({\n  wholePlanks,\n  plankWidth,\n  leftOverPlank,\n  validPlank,\n  slicedRow,\n}: Props) => {\n  const floor = [];\n  let i = 0;\n  while (i < Math.floor(wholePlanks)) {\n    floor.push(plankWidth);\n    i++;\n  }\n  if (validPlank) {\n    floor.unshift(leftOverPlank * plankWidth);\n  }\n\n  if (!validPlank) {\n    floor.pop();\n    floor.push(slicedRow);\n    floor.unshift(slicedRow);\n  }\n\n  return (\n    <div\n      style={{\n        border: 'solid black 1px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        padding: '0px',\n        margin: '0',\n        backgroundColor: '#fff',\n        color: '#000',\n      }}\n    >\n      <span style={{ textAlign: 'center', padding: '2px' }}>\n        {WALL_SPACE / 2} mm\n      </span>\n      {floor.map((item, i) => (\n        <p\n          key={i}\n          style={{\n            borderTop: 'solid black 1px',\n            textAlign: 'center',\n            padding: '4px',\n            backgroundColor: '#dcb63c',\n            margin: 0,\n            height:\n              item === plankWidth ? '100%' : `${(item / plankWidth) * 100}%`,\n          }}\n        >\n          {item.toFixed(0)} mm\n        </p>\n      ))}\n      <span\n        style={{\n          padding: '2px',\n          textAlign: 'center',\n          borderTop: 'solid 1px black',\n        }}\n      >\n        {WALL_SPACE / 2} mm\n      </span>\n    </div>\n  );\n};\n\nexport default LayOutFloor;\n","import React from 'react';\nimport { WALL_SPACE } from './utils';\n\ntype Props = {\n  wholePlanks: number;\n  validPlank: boolean;\n  leftOverPlank: number;\n  plankWidth: number;\n  slicedRow: number;\n};\nconst NonValidPlankControl = ({\n  wholePlanks,\n  plankWidth,\n  leftOverPlank,\n  validPlank,\n  slicedRow,\n}: Props) => {\n  return (\n    <article>\n      <h2>Resultat:</h2>\n      {validPlank ? (\n        <div>\n          <p>\n            <b>{wholePlanks} hele bord</b> av {wholePlanks * plankWidth}mm{' '}\n            <br />\n            <b>1 kappet bord</b> av {(leftOverPlank * plankWidth).toFixed(1)}mm\n            <br />\n            <b>Avstand til veggen på hver side: </b> {WALL_SPACE}mm\n            <br />\n            <b>Kontroll:</b>{' '}\n            {(\n              wholePlanks * plankWidth +\n              leftOverPlank * plankWidth +\n              WALL_SPACE\n            ).toFixed(1)}\n          </p>\n        </div>\n      ) : (\n        <div>\n          <p>\n            <b>{wholePlanks - 1} hele bord</b> av{' '}\n            {(wholePlanks - 1) * plankWidth}mm\n            <br />\n            <b>2 kappede bord på {slicedRow.toFixed(1)}mm </b>\n            <br />\n            <b>Kontroll</b> {(wholePlanks - 1) * plankWidth + slicedRow * 2}\n            <br />\n            <br />\n            <br />\n            Kapp den første og siste raden til samme bredde: <br />\n            {leftOverPlank + 1}*{plankWidth}/2 = {slicedRow}mm <br />\n            {wholePlanks - 1} bord + 2 kappede bord: <br />\n            {wholePlanks - 1}*{plankWidth}\n            mm + 2*{slicedRow} ={' '}\n          </p>\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default NonValidPlankControl;\n","import React, { useState } from 'react';\nimport { Disclaimer } from './Components/Disclaimer';\nimport { InputField } from './Fields';\nimport LayOutFloor from './LayOutFloor';\nimport NonValidPlankControl from './NonValidPlankControl';\nimport { getFloorData, WALL_SPACE } from './utils';\nimport './styles.css';\n\nexport default function App() {\n  const [fullWidthFloor, setFullWidth] = useState(1000);\n  const [plankWidth, setPlankWidth] = useState(283);\n  const [minWidth, setminWidth] = useState(100);\n\n  const {\n    wholePlanks,\n    leftOverPlank,\n    lastPlankIsValid,\n    slicedRow,\n  } = getFloorData({\n    fullWidthFloor: fullWidthFloor - WALL_SPACE,\n    plankWidth,\n    minWidth,\n  });\n  return (\n    <main className=\"App\">\n      <h1>Legge parkettgulv</h1>\n      <div className=\"Inputs\">\n        <InputField\n          label=\"Gulvbredde\"\n          name=\"fullWidthFloor\"\n          value={fullWidthFloor}\n          handleChange={setFullWidth}\n        />\n        <InputField\n          label=\"Bordbredde (mm)\"\n          name=\"plankWidth\"\n          value={plankWidth}\n          handleChange={setPlankWidth}\n        />\n        <InputField\n          label=\"Minste bredde for et kappet bord\"\n          name=\"minWidth\"\n          value={minWidth}\n          handleChange={setminWidth}\n        />\n      </div>\n      <NonValidPlankControl\n        wholePlanks={wholePlanks}\n        plankWidth={plankWidth}\n        leftOverPlank={leftOverPlank}\n        validPlank={lastPlankIsValid}\n        slicedRow={slicedRow}\n      />\n      <LayOutFloor\n        wholePlanks={wholePlanks}\n        plankWidth={plankWidth}\n        leftOverPlank={leftOverPlank}\n        validPlank={lastPlankIsValid}\n        slicedRow={slicedRow}\n      />\n      <Disclaimer />\n    </main>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}